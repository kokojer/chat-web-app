// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int               @id @default(autoincrement())
  avatar          String?           @unique
  firstName       String            @db.VarChar(30)
  lastName        String            @db.VarChar(30)
  username        String            @unique @db.VarChar(20)
  password        String
  Refresh_session Refresh_session[]
  Message         Message[]
  ChatMembers     ChatMembers[]
  lastVisitTime   DateTime?
  updatedAt    DateTime @updatedAt
  createdAt    DateTime @default(now())
}

model Message {
  id             Int              @id @default(autoincrement())
  chatId         Int
  userId         Int
  User           User?            @relation(fields: [userId], references: [id], onDelete: Cascade)
  MessageContent MessageContent[]
  Chat           Chat?            @relation(fields: [chatId], references: [id], onDelete: Cascade)
  updatedAt    DateTime @updatedAt
  createdAt    DateTime @default(now())
}

model pubsub_payloads {
  id             Int              @id @default(autoincrement())
  trigger         String
  payload         Json
  createdAt    DateTime @default(now())
}

model MessageContent {
  id        Int      @id @default(autoincrement())
  messageId Int
  Message   Message? @relation(fields: [messageId], references: [id], onDelete: Cascade)
  type      String
  content   String
  updatedAt    DateTime @updatedAt
  createdAt    DateTime @default(now())
}

model Chat {
  id          Int           @id @default(autoincrement())
  type        String        @default("personal")
  ChatMembers ChatMembers[]
  Message     Message[]
  updatedAt    DateTime @updatedAt
  createdAt    DateTime @default(now())
}

model ChatMembers {
  id     Int   @id @default(autoincrement())
  chatId Int
  userId Int
  Chat   Chat? @relation(fields: [chatId], references: [id], onDelete: Cascade)
  User   User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  updatedAt    DateTime @updatedAt
  createdAt    DateTime @default(now())
}

model Refresh_session {
  id           Int      @id @default(autoincrement())
  userId       Int
  refreshToken String   @db.Uuid()
  userAgent    String   @db.VarChar(200)
  ip           String   @db.VarChar(15)
  expiresIn    BigInt
  updatedAt    DateTime @updatedAt
  createdAt    DateTime @default(now())
  User         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
}
